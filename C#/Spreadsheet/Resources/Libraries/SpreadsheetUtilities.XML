<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
            <summary>
            <para><author>Author: Matthew Brownell (Program)</author></para>
            
            <para><author>Author: Joe Zachary (Skeleton)</author></para>
            
            <para><duedate>Due Date: 9/17/2015</duedate></para>
            
            <para>Creates a graph of ordered pairs (s, r)
            with the purpose of showing which elements depend
            on other elements or are dependended on.</para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph by initializing the two dictionaries.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            Report the total pairs in the graph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            Report the dependee(s) count of the given key.
            </summary>
            <param name="s"> Key to find values.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether the given pair given by a key for dependents has values or not.
            </summary>
            <param name="s"> Key to find values.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether the given pair given by a key for dependees has values or not.
            </summary>
            <param name="s"> Key to find values.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerate through the graph to find dependents, return each as string.
            </summary>
            <param name="s"> Key to find values.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerate through the graph to find dependees, return each as string.
            </summary>
            <param name="s"> Key to find values.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               s depends on t
            
             </summary>
             <param name="s"> s cannot be evaluated until t is</param>
             <param name="t"> t must be evaluated first.  S depends on T</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"> Key for to find underlying value.</param>
            <param name="t"> Underlying value to be removed.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replace the given pair (s, x) with x being all dependees of s replaced by all values of newDependents.
            </summary>
            <param name="s"> Key to have values replaced.</param>
            <param name="newDependents"> Set containing values to be added.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replace the given pair (x, s) with x being all dependents of s replaced by all values of newDependees.
            </summary>
            <param name="s"> Dependee to be changed.</param>
            <param name="newDependees"> Set containing values to be added.</param>
        </member>
    </members>
</doc>
